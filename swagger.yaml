swagger: '2.0'
info:
  description: 'Webservice documentation for the LCA Collaboration Server'
  version: '1.1.1'
  title: 'LCA Collaboration Server Webservice'
  contact:
    email: 'greve@greendelta.com'
host: 'data.openlca.org'
schemes:
- https
- http
definitions:
  ModelType:
    type: string
    enum: &MODEL_TYPE
      - 'ACTOR'
      - 'CATEGORY'
      - 'CURRENCY'
      - 'DQ_SYSTEM'
      - 'FLOW'
      - 'FLOW_PROPERTY'
      - 'IMPACT_CATEGORY'
      - 'IMPACT_METHOD'
      - 'LOCATION'
      - 'NW_SET'
      - 'PARAMETER'
      - 'PROCESS'
      - 'PRODUCT_SYSTEM'
      - 'PROJECT'
      - 'SOURCE'
      - 'UNIT'
      - 'UNIT_GROUP'
      - 'SOCIAL_INDICATOR'
  FlowType:
    type: string
    enum: &FLOW_TYPE
      - 'ELEMENTARY_FLOW'
      - 'PRODUCT_FLOW'
      - 'WASTE_FLOW'
  ProcessType:
    type: string
    enum: &PROCESS_TYPE
      - 'UNIT'
      - 'SYSTEM'
      - 'UNKNOWN'
  AggregationType:
    type: string
    enum: &AGGREGATION_TYPE
      - 'HORIZONTAL'
      - 'VERTICAL'
      - 'NONE'
      - 'UNKNOWN'
  ModellingApproach:
    type: string
    enum: &MODELLING_APPROACH
      - 'PHYSICAL'
      - 'ECONOMIC'
      - 'CAUSAL'
      - 'NONE'
      - 'UNKNOWN'
  ModellingPrinciple:
    type: string
    enum: &MODELLING_PRINCIPLE
      - 'ATTRIBUTIONAL'
      - 'CONSEQUENTIAL'
      - 'UNKNOWN'  
  LicenseType:
    type: string
    enum: &LICENSE_TYPE
      - 'FREE'
      - 'MIXED'
      - 'CHARGED'
      - 'UNKNOWN'    
  IndexAction:
    type: string
    enum: &INDEX_ACTION
      - 'ADD'
      - 'UPDATE'
      - 'DELETE'
  Credentials:
    type: object
    properties:
      username:
        description: 'The username of the user to login with'
        type: string
        example: 'john.doe'
      password:
        description: 'The password of the user to login with'
        type: string
        example: 'passw0rd'
      token:
        description: 'If two factor authentication is enabled, a token has to be provided'
        type: string
        example: '435163'
    required:
      - username
      - password
  Password:
    type: object
    properties:
      password:
        description: 'The new password'
        type: string
        example: 'passw0rd'
      password2:
        description: 'The same password, to ensure password was entered correctly'
        type: string
        example: 'passw0rd'
    required:
      - password
      - password2
  TwoFactorInfo:
    type: object
    properties:
      url:
        description: 'The OtpAuthTotpURL for generating a QR code'
        type: string
        example: 'otpauth://totp/openLCA%20Data%20Server:johndoe?secret=6HWCC6HXXN563FXX&issuer=openLCA+Data+Server'
      key:
        description: 'The two factor authentification secret'
        type: string
        example: '6HWCC6HXXN563FXX'
      enabled:
        description: 'True if two factor authentication is enabled'
        type: boolean
        default: false
    required:
      - url
      - key
  AggregationResultEntry:
    type: object
    properties: 
      key:
        description: 'The key of this aggregation result entry'
        type: string
        example: 'ACTOR'
      count:
        description: 'The amount of entries found for the given key'
        type: integer
        format: int64
        example: '12'
      subEntries:
        description: 'Children elements in case of hierarchical entries'
        type: array
        items: 
          $ref: '#/definitions/AggregationResultEntry'
    required:
     - key
     - count
  AggregationResult:
    type: object
    properties: 
      name:
        description: 'The name of this aggregation result'
        type: string
        example: 'repositoryId'
      type:
        description: 'The type of aggregation'
        type: string
        example: 'TERM'
      totalCount:
        description: 'The amount of entries found for this aggregation'
        type: integer
        format: int64
        example: '13'
      entries:
        description: 'A list of entries into which the aggregation splits (each possible result value is a result entry)'
        type: array
        items: 
          $ref: '#/definitions/AggregationResultEntry'
    required:
      - name
      - type
      - totalCount
  ResultInfo:
    type: object
    properties: 
      pageSize:
        description: 'The size of each page of results'
        type: integer
        format: int32
        example: '10'
      count:
        description: 'The amount of actual results returned'
        type: integer
        format: int64
        example: '8'
      totalCount:
        description: 'The amount total results matching the query'
        type: integer
        format: int64
        example: '887'
      currentPage:
        description: 'The current page number'
        type: integer
        format: int32
        example: '8'
      pageCount:
        description: 'The total number of pages'
        type: integer
        format: int32
        example: '8'
    required:
      - pageSize
      - count
      - totalCount
      - currentPage
      - pageCount
  SearchResult:
    type: object
    properties: 
      aggregations:
        description: 'The aggregations of the search result'
        type: array
        items:
          $ref: '#/definitions/AggregationResult'
      resultInfo:
        description: 'Search result specific information'
        $ref: '#/definitions/ResultInfo'
    required:
      - resultInfo
  RepositoryDescriptorSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/RepositoryDescriptor'
    required:
      - resultInfo
  GroupDescriptorSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/GroupDescriptor'
    required:
      - resultInfo
  CommitSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Commit'
    required:
      - resultInfo
  FetchRequestDataSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/FetchRequestData'
    required:
      - resultInfo
  IndexEntrySearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/IndexEntry'
    required:
      - resultInfo
  UserDescriptor:
    type: object
    properties:
      username:
        description: 'A username, e.g. used for login, etc.'
        type: string
        example: 'johndoe'
      name:
        description: 'A display name for the user'
        type: string
        example: 'John Doe'
    required:
      - username
      - name
  UserSettings:
    type: object
    properties:
      canCreateGroups:
        description: 'True if the user is allowed to create new groups'
        type: boolean
        default: false
      canCreateRepositories:
        description: 'True if the user is allowed to create new repositories'
        type: boolean
        default: false
      noOfRepositories:
        description: '0 for unlimited (if canCreateRepositories is true), otherwise the number of repositories the user is allowed to create'
        type: integer
        format: int32
        default: 0
      maxSize:
        description: '0 for unlimited space (if canCreateRepositories is true), otherwise the maximum size of all user group repositories in bytes'
        type: integer
        format: int64
        default: 0
      messagingEnabled:
        description: 'If true all users can initiate conversations, otherwise admins only'
        type: boolean
        default: true
      messagingRestricted:
        description: 'If true only team members (and admins) can initiate conversations'
        type: boolean
        default: false
      showOnlineStatus:
        description: 'If true the online status is shown in the messanger'
        type: boolean
        default: true
      showReadReceipt:
        description: 'If true read messages will be marked as read in the messanger'
        type: boolean
        default: true
      admin:
        description: 'True if the user is administrator'
        type: boolean
        default: false
      userManager:
        description: 'True if the user is user manager'
        type: boolean
        default: false
      dataManager:
        description: 'True if the user is data manager'
        type: boolean
        default: false
      blockedUsers:
        description: 'Users that are not allowed to initiate conversations'
        type: array
        items:
          $ref: '#/definitions/UserDescriptor'
  User:
    allOf: 
    - $ref: '#/definitions/UserDescriptor'
    properties:
      id: 
        type: string
        example: '15'
      email:
        type: string
        example: 'john.doe@company.com'
      twoFactorAuth:
        description: 'True if two factor authentication is enabled for the user'
        type: boolean
        default: false
      settings:
        $ref: '#/definitions/UserSettings'
    required:
      - id
      - email
  CurrentUser:
    allOf: 
    - $ref: '#/definitions/User'
    - properties:
        noOfTasks:
          description: 'Total number of active tasks'
          type: integer
          format: int32
          default: 0
        noOfRepositories:
          description: 'Total number of repositories in this users user group'
          type: integer
          format: int32
          default: 0
  TeamDescriptor:
    type: object
    properties:
      teamname:
        description: 'A teamname'
        type: string
        example: 'greendelta'
      name:
        description: 'A display label for the team'
        type: string
        example: 'GreenDelta GmbH'
    required:
      - teamname
      - name
  Team:
    allOf:
    - $ref: '#/definitions/TeamDescriptor'
    - properties:
        id:
          description: 'The internal id of the team'
          type: integer
          format: int64
          example: 3
    required:
      - id
  GroupDescriptor:
    type: object
    properties:
      name:
        description: 'The name of the group'
        type: string
        example: 'examples'
    required:
      - name
  Group:
    allOf: 
    - $ref: '#/definitions/GroupDescriptor'
    - properties:
        userCanDelete:
          description: 'True if the current user can delete the group'
          type: boolean
          default: false
        userCanWrite:
          description: 'True if the current user has permission to WRITE to the group'
          type: boolean
          default: false
        userCanCreate:
          description: 'True if the current user can create repositories within the group'
          type: boolean
          default: false
        userCanEditMembers:
          description: 'True if the current user can edit the members of the group'
          type: boolean
          default: false
  RepositorySettings:
    type: object
    properties:
      publicAccess:
        description: 'True if the repository can be accessed publicly'
        type: boolean
        default: false
      prohibitsCommits:
        description: 'True if the repository is locked for further commits'
        type: boolean
        default: false
      commentApproval:
        description: 'True if the a comment needs to be approved before publication'
        type: boolean
        default: false
      maxSize:
        description: 'The maximum size in bytes if a limitation is set, 0 otherwise'
        type: integer
        format: int64
        default: 0
  RepositoryDescriptor:
    type: object
    properties:
      group: 
        description: 'The group of the repository'
        type: string
        example: 'examples'
      name: 
        description: 'The name of the repository'
        type: string
        example: 'reference_data'
      groupIsUserNamespace:
        description: 'True if the group is a user namespace'
        type: boolean
        default: false
      settings:
        $ref: '#/definitions/RepositorySettings'
    required:
      - group
      - name
  RepositoryMetaInfo:
    type: object
    properties:
      schemaVersion: 
        description: 'The JSON-LD schema version of this repository'
        type: string
        example: 'http://openlca.org/schema/v1.1/'
    required:
      - schemaVersion
  Repository:
    allOf: 
    - $ref: '#/definitions/RepositoryDescriptor'
    - properties:
        userCanDelete:
          description: 'True if the current user is allowed to delete the repository'
          type: boolean
          default: false
        userCanWrite:
          description: 'True if the current user is allowed to write to the repository'
          type: boolean
          default: false
        userCanMove:
          description: 'True if the current user is allowed to move the repository'
          type: boolean
          default: false
        userCanClone:
          description: 'True if the current user is allowed to clone the repository'
          type: boolean
          default: false
        userCanEditMembers:
          description: 'True if the current user is allowed to edit members of the repository'
          type: boolean
          default: false
        userCanSetSettings:
          description: 'True if the current user is allowed to change settings of the repository'
          type: boolean
          default: false
        size:
          description: 'The size of the repository in bytes'
          type: integer
          format: int64
          default: 0
  Role:
    type: string
    enum: &ROLES
      - 'READER'
      - 'CONTRIBUTOR'
      - 'REVIEWER'
      - 'EDITOR'
      - 'OWNER'
  Membership:
    type: object
    properties:
      memberOf:
        description: 'Group or group/repository path the user is member of'
        type: string
        example: 'examples/reference_data'
      role:
        description: 'The role of the user in this group or repository'
        type: string
        enum: *ROLES
        example: 'READER'
      user:
        allOf:
        - $ref: '#/definitions/UserDescriptor'
        - description: 'The user this membership is applying to (or null if its a team membership)'
      team:
        allOf:
        - $ref: '#/definitions/TeamDescriptor'
        - description: 'The team this membership is applying to (or null if its a user membership)'
    required:
      - memberOf
      - role
  Commit:
    type: object
    properties:
      id:
        description: 'The id of the commit'
        type: string
        example: 'b16964d2-a5a0-7d05-4c69-782d87904ed2'
      message:
        description: 'The message of the commit'
        type: string
        example: 'Changed some data sets'
      user:
        description: 'The username of the user that performed the commit'
        type: string
        example: 'johndoe'
      timestamp:
        description: 'The time when the commit was performed'
        type: integer
        format: int64
        example: 1552993526562
      userDisplayName:
        description: 'The display name of the user that performed the commit or the username if the user does not exist anymore'
        type: string
        example: 'John Doe'
    required:
      - id
      - message
      - user
      - timestamp
      - userDisplayName
  FileReference:
    type: object
    properties:
      type:
        description: 'The model type of the data set'
        type: string
        enum: *MODEL_TYPE
        example: 'ACTOR'
      refId: 
        description: 'The reference id of the data set'
        type: string
        example: '64b169d2-7d05-4c69-a5a0-90782d874ed2'
    required:
      - type
      - refId
  Reference:
    type: object
    properties:
      id: 
        description: 'The id of the reference'
        type: string
        example: '64b169d2-7d05-4c69-a5a0-90782d874ed2'
      type:
        description: 'The model type of the reference'
        type: string
        enum: *MODEL_TYPE
        example: 'ACTOR'
      name: 
        description: 'The name of the reference'
        type: string
        example: 'John Doe'
      commitId: 
        description: 'The commit id of the reference'
        type: string
        example: '90782d87-7d05-4c69-a5a0-8a5a0d874c69'
    required:
      - id
      - type
      - name
      - commitId
  Dataset:
    allOf: 
    - $ref: '#/definitions/FileReference'
    - properties:
        name:
          description: 'The name of the data set'
          type: string
          example: 'John Doe'
        version:
          description: 'The version of the data set, containing Major, Minor, Update version (Major.Minor.Update)'
          type: string
          example: '1.2.1'
        lastChange:
          description: 'The date of the last change to the data set, specified in milliseconds since 1/1/1970'
          type: integer
          format: int64
          example: '1552993525562'
        categoryRefId:
          description: 'The reference id of the category of the data set'
          type: string
          example: '34c253f2-057d-a05a-694c-2d89078724ed'
        categoryType:
          description: 'If this data set is of type CATEGORY, the categoryType specified for which type of data set this category is for'
          type: string
          enum: *MODEL_TYPE
          example: 'ACTOR'
        categories:
          description: 'The category path as array'
          type: array
          items:
            type: string
          example: ['Elementary flows', 'Resource', 'Unspecified']
    required:
      - name
      - version
      - lastChange
  FetchRequestData:
    allOf: 
    - $ref: '#/definitions/Dataset'
    - properties:
        deleted:
          description: 'Indicates if the data set was deleted in the last commit'
          type: boolean
          default: false
        added:
          description: 'Indicates if the data set was added in the last commit'
          type: boolean
          default: false
  GLADInput:
    type: object
    properties:
      dataprovider:
        description: 'The name of the data provider of the selected data sets (will be used in GLAD)'
        type: string
        example: 'GreenDelta GmbH'
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
  IndexEntry:
    allOf:
    - $ref: '#/definitions/Dataset'
    - properties: 
        repositoryId:
          description: 'The id of the repository of the entry'
          type: string
          example: 'examples/reference_data'
        group:
          description: 'The name of the group of the repository the entry'
          type: string
          example: 'examples'
        action:
          description: 'The type of change of the entry, "ADD" if the data set was added in this commit, "UPDATE" if the data set existed before and "DELETE" if the data set was deleted in this commit'
          type: string
          enum: *INDEX_ACTION
          example: 'UPDATE'
        commitId:
          description: 'The id of the commit of the entry'
          type: string
          example: '43a523f2-057d-a05a-694c-2d89078724ed'
        commitMessage:
          description: 'The message that was specified when the commit was executed'
          type: string
          example: 'Initial commit'
        commitTimestamp:
          description: 'The time when the commit was executed'
          type: integer
          format: int64
          example: '1552893525562'
        mostRecent:
          description: 'Indicates if this is the most recent entry in the index, if false, newer versions of the data set exist'
          type: boolean
          default: false
        fullPath:
          description: 'The full category path including the name of the element at last, concatenated with a slash'
          type: string
          example: 'root_category/parent_category/category/dataset_name'
        category:
          description: 'The full category path of the element, concatenated with a slash'
          type: string
          example: 'root_category/parent_category/category'
        categoryPaths:
          description: 'The category (path) as all combinations (used to aggregate by results)'
          type: array
          items: 
            type: string
          example: '[root_category, root_category/parent_category, root_category/parent_category/category]'
      required:
        - repositoryId
        - group
        - action
  FlowEntry:
    allOf:
    - $ref: '#/definitions/IndexEntry'
    - properties:
        flowType:
          description: 'The type of flow'
          type: string
          enum: *FLOW_TYPE
          example: 'ELEMENTARY_FLOW'
      required:
        - flowType      
  ProcessEntry:
    allOf:
    - $ref: '#/definitions/IndexEntry'
    - properties:
        processType:
          description: 'The type of process'
          type: string
          enum: *PROCESS_TYPE
          example: 'UNIT' 
        completeness:
          description: 'A text describing the completeness'
          type: string
        sampleRepresentativeness:
          description: 'A text describing the representativeness of the samples'
          type: string
        samplingProcedure:
          description: 'A text describing the sampling procedure'
          type: string
        validFrom:
          type: integer
          format: int64
          description: 'The start of the validity of the data set in milliseconds since 01/01/1970 (unix-time tims 1000)'
          example: '1552893525562'
        validUntil:
          type: integer
          format: int64
          description: 'The end of the validity of the data set in milliseconds  since 01/01/1970 (unix-time tims 1000)'
          example: '1552893525563'
        validFromYear:
          type: integer
          format: int32
          description: 'The year of the start of the validity of the data set, will be taken from validFrom if not set'
          example: '2010'
        validUntilYear:
          type: integer
          format: int32
          description: 'The year of the end of the validity of the data set, will be taken from validUntil if not set'
          example: '2019'
        location:
          type: string
          description: 'The name of the location'
          example: 'Switzerland'
        locationCode:
          type: string
          description: 'The code of the location'
          example: 'CH'
        technology:
          type: string
          description: A description of the technology used in the data set
        description:
          type: string
          description: 'A description'
        supportedNomenclatures:
          description: 'The nomenclatures, the data set is compliant to'
          type: array
          items:
            type: string
            enum: ['ILCD']
        representativeness:
          description: 'A text describing the representativenes'
          type: string
        modellingPrinciple:
          type: string
          enum: *MODELLING_PRINCIPLE
          default: 'UNKNOWN'
        modellingApproach:
          type: string
          enum: *MODELLING_APPROACH
          default: 'UNKNOWN'
        biogenicCarbon:
          description: 'A text describing the biogenic carbon modelling'
          type: string
        reviewed:
          description: 'Indicates if the data set was reviewed or not'
          type: boolean
          default: false
        reviewer:
          description: 'The name of the reviewer'
          type: string
          example: 'John Doe'
        aggregationType:
          type: string
          enum: *AGGREGATION_TYPE  
          default: 'UNKNOWN'
        copyrightProtected:
          description: 'Indicates if the data set is copyright protected or not'
          type: boolean
          default: false
        copyrightHolder:
          description: 'The name of the copyright holder'
          type: string
          example: 'John Doe'
        licenseType:
          description: 'The type of license'
          type: string
          enum: *LICENSE_TYPE
          default: 'UNKNOWN'
        license:
          description: 'A license description'
          type: string
        contact:
          description: 'The name of the contact person'
          type: string
          example: 'John Doe'        
        inputs:
          description: 'A list of flow ids that are an input of the process'
          type: array
          items:
            type: string
        outputs:
          description: 'A list of flow ids that are an output of the process'
          type: array
          items:
            type: string
      required:
        - processType
parameters:
  group:
    name: 'group'
    description: 'The group of the repository'
    in: path
    type: string
    required: true
  repo:
    name: 'repo'
    description: 'The name of the repository'
    in: path
    type: string
    required: true
  type:
    name: 'type'
    description: 'The model type of the data set'
    in: path
    type: string
    enum: *MODEL_TYPE
    required: true
  refId:
    name: 'refId'
    description: 'The reference id of the data set'
    in: path
    type: string
    required: true
  commitId:
    name: 'commitId'
    description: 'The commit id for the data set (or latest before)'
    in: query
    type: string
  username:
    name: 'username'
    description: 'The username of the user'
    in: path
    type: string
    required: true
  teamname:
    name: 'teamname'
    description: 'The teamname of the team'
    in: path
    type: string
    required: true
  role:
    name: 'role'
    description: 'The role of the user in the repository'
    in: path
    type: string
    required: true
  page:
    name: 'page'
    description: 'page value for pagination, if the value is 0, no paging is applied and all values will be returned'
    in: query
    type: integer
    format: int32
    default: 1
  pageSize:
    name: 'pageSize'
    description: 'Defines the page size for pagination if page is not 0'
    in: query
    type: integer
    format: int32
    default: 10
  filter:
    name: 'filter'
    description: 'Filters results that contain the phrase in their name'
    in: query
    type: string
responses:
  NotLoggedIn:
    description: 'Not authenticated'
  NoReadPerm:
    description: 'No permission to READ in {group}/{repo}'
  NoReadPermGroup:
    description: 'No permission to READ in {group}'
  NoWritePerm:
    description: 'No permission to WRITE in {group}/{repo}'
  NoWritePermGroup:
    description: 'No permission to WRITE in {group}'
  NoDeletePerm:
    description: 'No permission to DELETE {group}/{repo}'
  NoChangeRolePerm:
    description: 'No permission to CHANGE_ROLE in {group}/{repo}'
  NoChangeRolePermGroup:
    description: 'No permission to CHANGE_ROLE in {group}'
  RepoNotFound:
    description: '{group}/{repo} not found'
  GroupNotFound:
    description: '{group} not found'
  UserNotFound:
    description: '{username} not found'
  UnsupportedSchema:
    description: 'Repository json schema version is not supported'
  NotUserManager:
    description: 'Not a user manager'
paths:
  /ws/public:
    get:
      tags:
      - 'Session'
      summary: 'Get current user'
      description: 'Get the currently logged in user'
      operationId: 'getCurrentUser'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the currently logged in user or empty user if not logged in'
          schema:
            $ref: '#/definitions/CurrentUser'
  /ws/public/login:
    post:
      tags:
      - 'Session'
      summary: 'Login'
      description: 'Logs in with the given credentials'
      operationId: 'login'
      consumes:
      - application/json
      produces:
      - text/plain
      parameters:
      - name: 'body'
        description: 'Login credentails'
        in: body
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: 'Login successful or "tokenRequired" (if two factor authentication is enabled an no token is provided)'
        401:
          description: 'Invalid credentials/Invalid token'
        403:
          description: 'Server is in maintenance mode (if not admin)'
        409:
          description: 'Already authenticated'
  /ws/public/logout:
    post:
      tags:
      - 'Session'
      summary: 'Logout'
      description: 'Logs out the currently logged in user'
      operationId: 'logout'
      responses: 
        200:
          description: 'Logout successful'
        409:
          description: 'Not logged in'
  /ws/group:
    get:
      tags:
      - 'Group'
      summary: 'List accessible groups'
      description: 'Loads a list of groups that are accessible for the client'
      operationId: 'getGroups'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      - name: 'onlyIfCanWrite'
        description: 'If true only groups the client has permission to WRITE to are returned'
        in: query
        type: boolean
        default: false
      responses:
        200:
          description: 'Returns a list of accessible groups'
          schema:
            $ref: '#/definitions/GroupDescriptorSearchResult'
        401:
          $ref: '#/responses/NotLoggedIn'
  /ws/group/{group}:
    get:
      tags:
      - 'Group'
      summary: 'Get group settings'
      description: 'Loads settings and permissions of {group}. For this operation the client needs permission to READ in {group}'
      operationId: 'getGroup'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the settings and permissions for {group}'
          schema:
            $ref: '#/definitions/Group'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPermGroup'
        404:
          description: '{group} not found'
    post:
      tags:
      - 'Group'
      summary: 'Create a new group'
      description: 'Creates a new group with {name}. For this operation the client needs general permission to create groups'
      operationId: 'createGroup'
      produces:
      - application/json
      responses:
        201:
          description: 'Returns the group descriptor of the newly created group'
          schema:
            $ref: '#/definitions/GroupDescriptor'
        400:
          description: 'Missing input for group name or invalid name. Valid names consist of four characters and only contain characters, number and _. Also some specific words are reserved'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          description: 'Not allowed to create groups'
        409:
          description: 'A group with the name {group} already exists'
    delete:
      tags:
      - 'Group'
      summary: 'Delete a group'
      description: 'Deletes {group} and all containing repositories. For this operation the client needs permission to DELETE {group}'
      operationId: 'deleteGroup'
      responses:
        200:
          description: '{group}/{name} was successfully deleted'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoDeletePerm'
    parameters:
    - name: 'group'
      description: 'The name for the group'
      in: path
      type: string
      required: true
  /ws/group/avatar/{group}:
    get:
      tags:
      - 'Group'
      summary: 'Get group avatar'
      description: 'Loads the avatar for {group}. For this operation the client needs permission to READ in {group}'
      operationId: 'getGroupAvatar'
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
    put:
      tags:
      - 'Group'
      summary: 'Set group avatar'
      description: 'Set the avatar for {group}. For this operation the client needs permission to WRITE in {group}'
      operationId: 'setGroupAvatar'
      consumes:
      - multipart/form-data
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
    parameters:
    - name: 'group'
      description: 'The name for the group'
      in: path
      type: string
      required: true
  /ws/public/repository/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get public repository settings'
      description: 'Loads settings of {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getPublicRepository'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns the settings for {group}/{repo}'
          schema:
            $ref: '#/definitions/RepositoryDescriptor'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/repository/avatar/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository avatar'
      description: 'Loads the avatar for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getPublicRepositoryAvatar'
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns the avatar for {group}/{repo} as byte array'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/repository/file/{group}/{repo}/{type}/{refId}/{filename}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository file'
      description: 'Loads {filename} of data set {type}/{refId} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryFile'
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      - name: 'filename'
        description: 'The filename of the file to obtain'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'Returns {filename} from data set {type}/{refId} for {commitId} in {group}/{repo} as byte array'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo}, data set {type}/{refId}, {commitId} or {filename} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository:
    get:
      tags:
      - 'Repository'
      summary: 'List accessible repositories'
      description: 'Loads a list of repositories that are accessible for the client'
      operationId: 'getRepositories'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      - name: 'group'
        description: 'Filters repositories by group (exact match)'
        in: query
        type: string
      - name: 'module'
        description: 'Module specific filter. If value is "REVIEW", the list of accessible repositories is filtered for those the user can manage tasks in'
        in: query
        type: string
        enum: ['REVIEW']
      responses:
        200:
          description: 'Returns a list of accessible repositories'
          schema:
            $ref: '#/definitions/RepositoryDescriptorSearchResult'
        401:
          $ref: '#/responses/NotLoggedIn'
  /ws/repository/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository settings'
      description: 'Loads settings and permissions of {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepository'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the settings and permissions for {group}/{repo}'
          schema:
            $ref: '#/definitions/Repository'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
    post:
      tags:
      - 'Repository'
      summary: 'Create a new repository'
      description: 'Creates a new repository in {group} with name {repo}. For this operation the client needs permission to WRITE to {group} and general permission to create repositories'
      operationId: 'createRepository'
      produces:
      - application/json
      responses:
        201:
          description: 'Returns the repository descriptor of the newly created repository'
          schema:
            $ref: '#/definitions/RepositoryDescriptor'
        400:
          description: 'Missing input for group or name, not existing group or invalid name. Valid names consist of four characters and only contain characters, number and _. Also some specific words are reserved'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePermGroup'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{repo} already exists in {group}'
    delete:
      tags:
      - 'Repository'
      summary: 'Delete a repository'
      description: 'Deletes {group}/{repo}. For this operation the client needs permission to DELETE {group}/{repo}'
      operationId: 'deleteRepository'
      responses:
        200:
          description: '{group}/{name} was successfully deleted'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoDeletePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
    parameters:
    - $ref: '#/parameters/group'
    - $ref: '#/parameters/repo'
  /ws/repository/avatar/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository avatar'
      description: 'Loads the avatar for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryAvatar'
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group}/{repo} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
    put:
      tags:
      - 'Repository'
      summary: 'Set repository avatar'
      description: 'Set the avatar for {group}/{repo}. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'setRepositoryAvatar'
      consumes:
      - multipart/form-data
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group}/{repo} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
    parameters:
    - $ref: '#/parameters/group'
    - $ref: '#/parameters/repo'
  /ws/repository/meta/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository meta information'
      description: 'Loads meta information for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryMetaInfo'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns repository meta information'
          schema:
            $ref: '#/definitions/RepositoryMetaInfo'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository/export/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Export a repository (migrate)'
      description: 'Exports {group}/{repo} for migration to another collaboration server (only data and repo info is exported, comments and membership information are dropped). For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'exportRepository'
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns a zip file containing the complete repository data directory, containing the data sets, commit history, settings and meta information'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository/import/{group}/{repo}:
    post:
      tags:
      - 'Repository'
      summary: 'Import data into an empty repository'
      description: 'Imports either an exported repository from another collaboration server or a JSON-LD zip file exported from openLCA. If {group}/{repo} is not empty, existing data will be overwritten. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'importRepository'
      consumes:
      - multipart/form-data
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitMessage'
        description: 'The commit message in case of format=json-ld'
        in: formData
        type: string
      - name: 'file'
        description: 'The file to be imported'
        in: formData
        type: string
      - name: 'format'
        description: 'Either json-ld or empty (empty=import exported repository)'
        in: query
        type: string
      responses:
        200:
          description: 'The data was successfully imported'
        400:
          description: 'Missing input for commit message, when format=json-ld'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository/move/{group}/{repo}/{newGroup}/{newRepo}:
    post:
      tags:
      - 'Repository'
      summary: 'Move an existing repository'
      description: 'Move {group}/{repo} to {newGroup}/{newRepo} or rename it within the same group if {group}={newGroup}. For this operation the client needs permission to WRITE in {newGroup} and permission to READ in {group}/{repo}'
      operationId: 'moveRepository'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'newGroup'
        description: 'The name of the group to move {group}/{repo} to (if it equals the existing group, the repository is renamed)'
        in: path
        type: string
        required: true
      - name: 'newRepo'
        description: 'The new name of the repo'
        in: path
        type: string
        required: true
      responses:
        200:
          description: '{group}/{repo} was successfully moved/renamed'
        400:
          description: '{newGroup} does not exist'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{newGroup}/{newRepo} already exists'
  /ws/repository/clone/{group}/{repo}/{commitId}/{newGroup}/{newRepo}:
    post:
      tags:
      - 'Repository'
      summary: 'Clone an existing repository'
      description: 'Clone an existing repository to {newGroup}. For this operation the client needs permission to WRITE in {newGroup} and permission to READ in {group}/{repo}'
      operationId: 'cloneRepository'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'If specified only data until {commitId} are cloned'
        in: path
        type: string
        required: true
      - name: 'newGroup'
        description: 'The name of the group to move the repository to (if it equals the existing group, the repository is renamed'
        in: path
        type: string
        required: true
      - name: 'newRepo'
        description: 'The new name of the repo'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'The repository was successfully moved/renamed'
        400:
          description: '{newGroup} does not exist'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{newGroup}/{newRepo} already exists'
  /ws/repository/settings/{group}/{repo}/{setting}/{value}:
    put:
      tags:
      - 'Repository'
      summary: 'Change a setting of the repository'
      description: 'Change the value of {setting} to {value}. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'setRepositorySetting'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'setting'
        description: 'The name of the setting to change'
        in: path
        type: string
        enum: ['publicAccess', 'prohibitCommits', 'commentApproval', 'maxSize']
        required: true
      - name: 'value'
        description: 'The new value for {setting}, a long value for maxSize or true/false for the other settings'
        in: path
        type: string
        required: true
      responses:
        200:
          description: '{setting} was changed to {value}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}:
    get:
      tags:
      - 'Membership (Group)'
      summary: 'Get memberships for a group'
      description: 'Get all memberships for {group}. For this operation the client needs permission to READ in {group}'
      operationId: 'getGroupMemberships'
      parameters:
      - $ref: '#/parameters/group'
      responses:
        200:
          description: 'Returns a list of memberships to {group}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Membership'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
  /ws/membership/{group}/user/{username}/{role}:
    post:
      tags:
      - 'Membership (Group)'
      summary: 'Add a user to a group'
      description: 'Add {username} to {group} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'addUserMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{username} was added to {group} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
        409:
          description: '{username} already is a direct member of {group}'
    put:
      tags:
      - 'Membership (Group)'
      summary: 'Update a users role in a group'
      description: 'Update the role of {username} in {group} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'updateUserMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {username} was changed to {role} in {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {username} is not a member'
  /ws/membership/{group}/user/{username}:
    delete:
      tags:
      - 'Membership (Group)'
      summary: 'Delete a user from a group'
      description: 'Deletes {username} from {group}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'deleteUserMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/username'
      responses:
        200:
          description: '{username} was deletes from {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {username} is not a member'
  /ws/membership/{group}/team/{teamname}/{role}:
    post:
      tags:
      - 'Membership (Group)'
      summary: 'Add a team to a group'
      description: 'Add {teamname} to {group} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'addTeamMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{teamname} was added to {group} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
        409:
          description: '{teamname} already is a direct member of {group}'
    put:
      tags:
      - 'Membership (Group)'
      summary: 'Update a teams role in a group'
      description: 'Update the role of {teamname} in {group} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'updateTeamMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {teamname} was changed to {role} in {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {teamname} is not a member'
  /ws/membership/{group}/team/{teamname}:
    delete:
      tags:
      - 'Membership (Group)'
      summary: 'Delete a team from a group'
      description: 'Deletes {teamname} from {group}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'deleteTeamMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/teamname'
      responses:
        200:
          description: '{teamname} was deletes from {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {teamname} is not a member'
  /ws/membership/{group}/{repo}:
    get:
      tags:
      - 'Membership (Repository)'
      summary: 'Get memberships for a repository'
      description: 'Get all memberships for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryMemberships'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns a list of memberships to {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/user/{username}/{role}:
    post:
      tags:
      - 'Membership (Repository)'
      summary: 'Add a user to a repository'
      description: 'Add {username} to {group}/{repo} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'addUserMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{username} was added to {group}/{repo} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{username} already is a direct member of {group}/{repo}'
    put:
      tags:
      - 'Membership (Repository)'
      summary: 'Update a users role in a repository'
      description: 'Update the role of {username} in {group}/{repo} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'updateUserMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {username} was changed to {role} in {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {username} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/user/{username}:
    delete:
      tags:
      - 'Membership (Repository)'
      summary: 'Delete a user from a repository'
      description: 'Deletes {username} from {group}/{repo}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'deleteUserMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/username'
      responses:
        200:
          description: '{username} was deletes from {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {username} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/team/{teamname}/{role}:
    post:
      tags:
      - 'Membership (Repository)'
      summary: 'Add a team to a repository'
      description: 'Add {teamname} to {group}/{repo} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'addTeamMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{teamname} was added to {group}/{repo} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{teamname} already is a direct member of {group}/{repo}'
    put:
      tags:
      - 'Membership (Repository)'
      summary: 'Update a teams role in a repository'
      description: 'Update the role of {teamname} in {group}/{repo} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'updateTeamMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {teamname} was changed to {role} in {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {teamname} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/team/{teamname}:
    delete:
      tags:
      - 'Membership (Repository)'
      summary: 'Delete a team from a repository'
      description: 'Deletes {teamname} from {group}/{repo}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'deleteTeamMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/teamname'
      responses:
        200:
          description: '{teamname} was deletes from {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {teamname} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/commit/request/{group}/{repo}:
    get:
      tags:
      - 'Commit'
      summary: 'Request to commit data sets'
      description: 'Checks if the clients last commit id is actually the last commit to {group}/{repo}, this check is performed during a commit as well; this method is to run the check without streaming the data. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'requestCommit'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'User is in sync with {group}/{repo} and is allowed to commit data sets'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: 'Out of sync, if there were other commits before the current commit, but after the commit with the specified {lastCommitId}'
  /ws/commit/{group}/{repo}:
    post:
      tags:
      - 'Commit'
      summary: 'Commit data sets'
      description: 'Commits data sets to {group}/{repo}. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'commit'
      consumes: 
      - application/octet-stream
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'body'
        description: 'An input stream streaming the data sets from the client to the server as byte array. See fetch response 200 for definition of the byte array'
        in: body
        schema: 
          type: object
        required: true
      - name: 'lastCommitId'
        description: 'The clients last commit id before this current commit'
        in: query
        type: string
      responses:
        201:
          description: 'Returns the new commit id if the data sets were successfully committed to {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: 'Out of sync, if there were other commits before the current commit, but after {lastCommitId}'
  /ws/public/fetch/data/{group}/{repo}/{type}/{refId}:
    get:
      tags:
      - 'Fetch'
      summary: 'Fetch a single data set'
      description: 'For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'fetchDataSet'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      responses:
        200:
          description: 'Returns the newest data set of {type} with {refId} within {group}/{repo} until {commitId}. See JSON-LD definition for data set structure'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data set with given type, refId & (optional) commit id found in it'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/fetch/request/{group}/{repo}:
    get:
      tags:
      - 'Fetch'
      summary: 'Request to fetch data sets'
      description: 'Loads data set descriptors to be fetched in a subsequent "fetch" invocation. Clients can use this method to display changes to the user before invoking the actual fetch operation. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'requestFetch'
      produces:
      - 'application/json'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'lastCommitId'
        description: 'The last fetched commit, before executing the current fetch request'
        in: query
        type: string
      - name: 'sync'
        description: 'If true includes all data set descriptors until {lastCommitId}, if false includes all data set descriptors after {lastCommitId}'
        in: query
        type: boolean
        default: false
      responses:
        200:
          description: 'Returns all data set descriptors for data sets commited to {group}/{repo} since {lastCommitId}'
          schema:
            $ref: '#/definitions/FetchRequestData'
        204:
          description: 'No data sets to fetch'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/fetch/references/{group}/{repo}/{commitId}:
    get:
      tags:
      - 'Fetch'
      summary: 'List all references for a commit'
      description: 'Loads data set descriptors of all data sets that were part of {commitId}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'fetchCommitReferences'
      produces:
      - 'application/json'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'The id of the commit to get the references for'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'Returns all data set descriptors for data sets commited to {group}/{repo} in {commitId}'
          schema:
            type: array
            items:
              $ref: '#/definitions/FetchRequestData'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no commit with id {commitId} found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/fetch/{group}/{repo}:
    post:
      tags:
      - 'Fetch'
      summary: 'Fetch data sets'
      description: 'Fetches all data sets for {group}/{repo} that were added after/until {commitId}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'fetch'
      consumes: 
      - application/json
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'The commit id to fetch data after/until'
        in: query
        type: string
      - name: 'download'
        description: 'If true fetches all data sets until {commitId}, if false fetches all data sets after {commitId}'
        in: query
        type: boolean
        default: false
      - name: 'body'
        description: 'A list of data sets to fetch (clients might have identified already updated files, this can be used to specifiy which data sets actually need to be returned'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/FileReference'
      responses:
        200:
          description: 'Returns an output stream, streaming the collected data sets as byte array. For each data set a byte array is constructed by the following pattern: 4 bytes specifying the length of the data set descriptor, followed by the bytes of the data set descriptor json string itself. Next, 4 bytes specifying the length of the data set, followed by the bytes of the data set json string itself. If any binary data is attached, 4 bytes specifying the number of binary files. Next, for each binary file: The length of the path string, followed by the path string itself, followed by the length of the data, followed by the data itself. The length information is in Big-Endian order, the data strings are utf-8 encoded and, the data strings and binary files are also gzipped'
        204:
          description: 'No data sets to fetch'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/{group}/{repo}:
    get:
      tags: 
      - 'History'
      summary: 'Get commit history for a repository'
      description: 'Loads the commit history for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'lastCommitId'
        description: 'If specified, only commits after the specified commit are returned'
        in: query
        type: string
      responses:
        200:
          description: 'The commit history of {group}/{repo}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Commit'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or commit {lastCommitId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/{group}/{repo}/{type}/{refId}:
    get:
      tags: 
      - 'History'
      summary: 'Get commit history for a data set'
      description: 'Loads the commit history for data set {refId} of {type} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getDatasetCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      responses:
        200:
          description: 'The commit history of data set {refId} in {group}/{repo}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Commit'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or data set {refId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/category/{group}/{repo}/{refId}:
    get:
      tags: 
      - 'History'
      summary: 'Get commit history for a category'
      description: 'Loads the commit history for category {refId} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getCategoryCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/refId'
      responses:
        200:
          description: 'The commit history of category {refId} in {group}/{repo}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Commit'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or category {refId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/search/{group}/{repo}:
    get:
      tags: 
      - 'History'
      summary: 'Get paginated and filtered commit history'
      description: 'Loads the commit history for {group}/{repo}, filtered by {filter} and paged. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'searchCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      responses:
        200:
          description: 'The commit history for {group}/{repo}'
          schema:
            $ref: '#/definitions/CommitSearchResult'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/references/{group}/{repo}/{commitId}:
    get:
      tags: 
      - 'History'
      summary: 'Search references of a commit'
      description: 'Loads the data sets that were {commitId} in {group}/{repo}, paged and filtered by {filter} and {type}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getCommitReferences'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'The commit id of the commit to get'
        in: path
        type: string
        required: true
      - name: 'type'
        description: 'If set only get references of type {type}'
        in: query
        type: string
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      responses:
        200:
          description: 'The data sets that were committed to {group}/{repo} during {commitId}'
          schema:
            $ref: '#/definitions/FetchRequestDataSearchResult'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/commit/{group}/{repo}/{commitId}:
    get:
      tags: 
      - 'History'
      summary: 'Get a commit'
      description: 'Loads {commitId} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getCommit'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'The commit id of the commit to get'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'Return {commitId} in {group}/{repo}'
          schema:
            $ref: '#/definitions/Commit'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or {commitId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/previousCommitId/{group}/{repo}/{type}/{refId}/{commitId}:
    get:
      tags: 
      - 'History'
      summary: 'Get previous commit id'
      description: 'Looks up the id of the commit on {group}/{repo}, prior to {commitId}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getPreviousCommitId'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - name: 'commitId'
        description: 'The id of the commit to get the predecessor for'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'The id of the preceeding commit'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or {commitId} not found or {commitId} was the first commit (no predecssor found)'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/search:
    get:
      tags:
      - 'Search'
      summary: 'Search data sets'
      description: 'Searches for data sets across the collaboration server'
      operationId: 'searchDatasets'
      produces:
      - application/json
      parameters:
      - name: 'query'
        description: 'Filter results by text'
        in: query
        type: string
      - name: 'group'
        description: 'Filter by group name (exact matches)'
        in: query
        type: string
      - name: 'repositoryId'
        description: 'Filter by repositoryId (group/repo) (exact matches)'
        in: query
        type: string
      - name: 'type'
        description: 'Filter by model type (exact matches)'
        enum: *MODEL_TYPE
        in: query
        type: string
      - name: 'categoryPaths'
        description: 'Filter by category path (exact matches, only applies if type is set)'
        in: query
        type: string
      - name: 'flowType'
        description: 'Filter by flow type (exact matches, only applies if type=FLOW)'
        enum: *FLOW_TYPE
        in: query
        type: string
      - name: 'processType'
        description: 'Filter by process type (exact matches, only applies if type=PROCESS)'
        enum: *PROCESS_TYPE
        in: query
        type: string
      - name: 'modellingApproach'
        description: 'Filter by modellingApproach (exact matches, only applies if type=PROCESS)'
        enum: *MODELLING_APPROACH
        in: query
        type: string
      - name: 'validFromYear'
        description: 'Filter by validFromYear (exact matches, only applies if type=PROCESS)'
        in: query
        type: integer
        format: int64
      - name: 'validUntilYear'
        description: 'Filter by validUntilYear (exact matches, only applies if type=PROCESS)'
        in: query
        type: integer
        format: int64
      - name: 'location'
        description: 'Filter by location (exact matches, only applies if type=PROCESS)'
        in: query
        type: string
      - name: 'contact'
        description: 'Filter by contact (exact matches, only applies if type=PROCESS)'
        in: query
        type: string
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      responses:
        200:
          description: 'Returns all data sets that were found for the given criteria, flow data sets will be returned as FlowIndexEntry, process data sets will be returned as ProcessIndexEntry, other data sets will be returned as (default) IndexEntry'
          schema:
            type: array
            items: 
              $ref: '#/definitions/IndexEntrySearchResult'
  /ws/public/search/flowLinks/{flowRefId}:
    get:
      tags:
      - 'Search'
      summary: 'Search flow links'
      description: 'Searches for data sets that either produce, emit or consume {flowRefId}'
      operationId: 'searchFlowLinks'
      produces:
      - application/json
      parameters:
      - name: 'flowRefId'
        description: 'The ref id of the flow to search links for'
        in: path
        type: string
        required: true
      - $ref: '#/parameters/commitId'
      - name: 'direction'
        description: 'Filter by flow direction'
        in: query
        type: string
        enum: ['in', 'out', 'both']
      - name: 'repositoryId'
        description: 'Filter by repository id (group/repo)'
        in: query
        type: string
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      responses:
        200:
          description: 'Returns all data sets that meet {refId} and optional filters'
          schema:
            type: array
            items: 
              $ref: '#/definitions/IndexEntrySearchResult'
  /ws/public/download/json/prepare/{group}/{repo}:
    get:
      tags: 
      - 'Download (JSON-LD)'
      summary: 'Prepare download of a repository'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadMultiPath'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'path'
        description: 'A category path to filter the data sets to export'
        in: query
        type: string
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    post:
      tags: 
      - 'Download (JSON-LD)'
      summary: 'Prepare download of a repository (direct selection with category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadMultiCategories'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export, if this element is a category, all children will be collected and exported'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/Reference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    put:
      tags: 
      - 'Download (JSON-LD)'
      summary: 'Prepare download of a repository (direct selection without category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadMultiSelection'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/FileReference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/json/prepare/{group}/{repo}/{type}/{refId}:
    get:
      tags: 
      - 'Download (JSON-LD)'
      summary: 'Prepare download of a data set (single data set, with references)'
      description: 'Collects and compresses data set {type} {refId} and its references from {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadSingle'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      responses:
        200:
          description: 'The token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {type} {refId} and {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/json/{token}:
    get:
      tags: 
      - 'Download (JSON-LD)'
      summary: 'Download a prepared JSON-LD zip-archive'
      description: 'Looks up the token in the temporary filestorage and returns the prepared JSON-LD zip-archive'
      operationId: 'downloadJson'
      produces:
      - application/octet-stream
      parameters:
      - name: 'token'
        description: 'The token returned by any of the prepare calls'
        type: string
        in: path
        required: true
      responses:
        200:
          description: 'Returns the prepared zip-archive'
        404:
          description: 'No prepared zip-archive found for {token}'
  /ws/public/download/ilcd/prepare/{group}/{repo}:
    get:
      tags: 
      - 'Download (ILCD)'
      summary: 'Prepare download of a repository'
      description: 'Collects and compresses data sets in {group}/{repo} into a ILCD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareIlcdDownloadMultiPath'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'path'
        description: 'A category path to filter the data sets to export'
        in: query
        type: string
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (ILCD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    post:
      tags: 
      - 'Download (ILCD)'
      summary: 'Prepare download of a repository (direct selection with category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a ILCD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareIlcdDownloadMultiCategories'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export, if this element is a category, all children will be collected and exported'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/Reference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (ILCD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    put:
      tags: 
      - 'Download (ILCD)'
      summary: 'Prepare download of a repository (direct selection without category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a ILCD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareIlcdDownloadMultiSelection'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/FileReference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (ILCD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/ilcd/prepare/{group}/{repo}/{type}/{refId}:
    get:
      tags: 
      - 'Download (ILCD)'
      summary: 'Prepare download of a data set (single data set, with references)'
      description: 'Collects and compresses data set {type} {refId} and its references from {group}/{repo} into a ILCD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareIlcdDownloadSingle'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      responses:
        200:
          description: 'The token to download the prepared zip-archive. see Download (ILCD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {type} {refId} and {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/ilcd/{token}:
    get:
      tags: 
      - 'Download (ILCD)'
      summary: 'Download a prepared ILCD zip-archive'
      description: 'Looks up the token in the temporary filestorage and returns the prepared ILCD zip-archive'
      operationId: 'downloadIlcd'
      produces:
      - application/octet-stream
      parameters:
      - name: 'token'
        description: 'The token returned by any of the prepare calls'
        type: string
        in: path
        required: true
      responses:
        200:
          description: 'Returns the prepared zip-archive'
        403:
          description: 'If a different user tries to download the prepared zip-archive then the one who created it'
        404:
          description: 'No prepared zip-archive found for {token}'
  /ws/user:
    get:
      tags: 
      - 'User'
      summary: 'Get users'
      description: 'Loads a list of user descriptors'
      operationId: 'getUsers'
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      - name: 'module'
        description: 'Load a module specific list, MESSAGING loads all users that can be messaged, REVIEW loads all users that have the permission to REVIEW in {repositoryPath}'
        type: string
        enum: ['MESSAGING', 'REVIEW']
        in: query
      - name: 'repositoryPath'
        description: 'The repository id to filter users from (only applies if module=REVIEW)'
        type: string
        in: query
      produces:
      - application/json
      responses:
        200:
          description: 'A list of user descriptors'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          $ref: '#/responses/NotLoggedIn'
        404:
          $ref: '#/responses/UserNotFound'
  /ws/user/{username}:
    get:
      tags: 
      - 'User'
      summary: 'Get a user'
      description: 'Loads {username}'
      operationId: 'getUser'
      parameters:
      - $ref: '#/parameters/username'
      produces:
      - application/json
      responses:
        200:
          description: 'If current user is {username}, returns the complete user info, only username and name otherwise'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Missing input, invalid username or name or email already in use'    
        401:
          $ref: '#/responses/NotLoggedIn'
        404:
          $ref: '#/responses/UserNotFound'
    put:
      tags: 
      - 'User'
      summary: 'Update a user'
      description: 'Updates {username}'
      operationId: 'updateUser'
      parameters:
      - $ref: '#/parameters/username'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 'After successful update, returns the changed user'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Missing input or email already in use'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        404:
          $ref: '#/responses/UserNotFound'
  /ws/user/avatar/{username}:
    get:
      tags: 
      - 'User'
      summary: 'Get a users avatar'
      description: 'Loads the avatar of {username}'
      operationId: 'getUserAvatar'
      parameters:
      - $ref: '#/parameters/username'
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        404:
          $ref: '#/responses/UserNotFound'
    put:
      tags: 
      - 'User'
      summary: 'Set user avatar'
      description: 'Sets the avatar of {username}'
      operationId: 'setUserAvatar'
      parameters:
      - $ref: '#/parameters/username'
      consumes:
      - multipart/form-data
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'After successful update, returns the changed avatar'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        404:
          $ref: '#/responses/UserNotFound'
  /ws/user/setpassword/{username}:
    put:
      tags: 
      - 'User'
      summary: 'Set password'
      description: 'Sets a new password for {username}'
      operationId: 'setPassword'
      parameters:
      - $ref: '#/parameters/username'
      - name: 'body'
        description: 'The repository id to filter users from (only applies if module=REVIEW)'
        in: body
        schema:
          $ref: '#/definitions/Password'
      consumes:
      - application/json
      responses:
        200:
          description: 'Successfully updated password of {username} to {password}'
        400:
          description: 'Passwords did not match or password was not secure (Password must consist of at least 8 characters and must contain at least 1 digit, 2 different lowercase letters and 2 different uppercase letters)'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        404:
          $ref: '#/responses/UserNotFound'
  /ws/user/twoFactorAuth/{username}:
    get:
      tags: 
      - 'User'
      summary: 'Get two factor authentification info'
      description: 'Loads the two factor authentification info of {username}'
      operationId: 'getTwoFactorAuthenticationInfo'
      parameters:
      - $ref: '#/parameters/username'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the two factor authentification info'
          schema:
            $ref: '#/definitions/TwoFactorInfo'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        404:
          $ref: '#/responses/UserNotFound'
  /ws/user/twoFactorAuth/{username}/{enable}:
    put:
      tags: 
      - 'User'
      summary: 'Toggle two factor authentication'
      description: 'Enables/disables configuration of two factor authentification for {username}'
      operationId: 'toggleTwoFactorAuthentication'
      parameters:
      - $ref: '#/parameters/username'
      - name: 'enable'
        description: 'if true, enable two factor authentication, otherwise disable it'
        type: boolean
        in: path
        required: true
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the two factor authentification info if enabled'
          schema:
            $ref: '#/definitions/TwoFactorInfo'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        404:
          $ref: '#/responses/UserNotFound'
  /ws/usermanager/user/{username}:
    post:
      tags: 
      - 'User'
      summary: 'Create a new user'
      description: 'Create a new user {username} with generated password. An email containing the password is sent to the email specified for the new user. For this operation the client needs special permission to manage user'
      operationId: 'createUser'
      parameters:
      - $ref: '#/parameters/username'
      - name: 'body'
        description: 'The information of the user to create'
        in: body
        schema:
          $ref: '#/definitions/User'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        201:
          description: 'User was successfully created'
          schema:
            $ref: '#/definitions/User'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        400:
          description: 'Missing input, invalid username or name or email already in use'    
    delete:
      tags: 
      - 'User'
      summary: 'Delete a user'
      description: 'Deletes {username} with generated password. For this operation the client needs special permission to manage user'
      operationId: 'deleteUser'
      parameters:
      - $ref: '#/parameters/username'
      responses:
        200:
          description: 'User was successfully deleted'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NotUserManager'
        404:
          description: '{username} not found'
  /ws/datamanager/glad/push/{group}/{repo}:
    post:
      tags: 
      - 'GLAD'
      summary: 'Push repository data sets to GLAD'
      description: 'Pushes the selected data sets to the preconfigured GLAD node. For this operation the client needs special permission to manage data'
      operationId: 'pushToGLAD'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'body'
        description: 'The elements to export, if an element is a category, all children will be collected and exported'
        in: body
        schema:
          $ref: '#/definitions/GLADInput'
      consumes:
      - application/json
      responses:
        200:
          description: 'Data sets were successfully pushed to the preconfigured GLAD node'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          description: 'Not a data manager'
        404:
          $ref: '#/responses/RepoNotFound'
        503:
          description: 'Invalid GLAD node configuration, contact data manager or administrator'